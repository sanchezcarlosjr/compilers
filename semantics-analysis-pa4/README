README file for Programming Assignment 4 (Java edition)
======================================================

Your directory should now contain the following files:

 build.xml
 PA4.pdf
 cool-manual.pdf
 ASTConstants.java
 ASTLexer.java
 ASTParser.java
 AbstractSymbol.java
 AbstractTable.java
 BoolConst.java
 SemanticsAnalysis.java
 Flags.java
 IdSymbol.java
 IdTable.java
 IntSymbol.java
 IntTable.java
 ListNode.java
 README
 Semant.java
 StringSymbol.java
 StringTable.java
 SymbolTable.java
 SymtabExample.java
 TokenConstants.java
 TreeConstants.java
 TreeNode.java
 Utilities.java
 bad.cl
 good.cl
 cool-tree.aps
 cool-tree.java
 compare-semant.py
 coolc.py
 mycoolc.py
 semant.py
 mysemant.py
 symtab-example.py
 runmips.py
 coolc.jar
 trap_handler.mars
 tests/
 javadoc/

	The build.xml contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code.  EDIT AND SUBMIT.

	good.cl and bad.cl test a few features of the semantic checker.
	You should add tests to ensure that good.cl exercises as many
	legal semantic combinations as possible and that bad.cl
	exercises as many kinds of semantic errors as possible.
        EDIT AND SUBMIT.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST). This
	file is provided for your reference.  DO NOT MODIFY.

        TreeNode.java and ListNode.java contain definitions used by the
        tree package. DO NOT MODIFY.  

        cool-tree.java specifies and gives an implementation of Cool ASTs
        (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to add functions to the AST classes to
        store, fetch, and compute information about the AST.

   	You should NOT remove any definitions that are already present
   	in cool-tree.java.  These function and data members are required
   	for the system to function properly.

        You should add any fields and methods to the classes you need to
        perform semantic analysis.  You will need to add, for example,
        methods which traverse the expressions of the tree and implement
        the type-checking rules.  The entry point to the semantic
        analyzer is program.semant().  EDIT AND SUBMIT cool-tree.java.

	SemanticsAnalysis.java implements a placeholder class for a few useful
	methods.  Feel free to extend it to implement some real data
	strucutre.

	TreeConstants.java defined some useful symbol constants.  You
	may add some of your own, if you wish.

	ASTLexer.java, ASTParser.java, and ASTConstants.java implement a
	lexer and a parser for reading text representation of ASTs from
	console in the format produced by the parser phase. DO NOT
	MODIFY.

        Semant.java contains a driver to test the analyzer.  The main
        method reads an AST in text form from standard input, parses it,
        and then produces a type-annotated AST on standard output.  The
        script mycoolc can pass any of the standard flags to the
        semantic analyzer as well; for this assignment, -s (semantic
        analysis debug) may be useful as it sets a static variable
        Flags.semant_debug to "true".  If you want your semantic checker
        to print debug information when the option is set, write your
        debug code in the following format:

	      if (Flags.semant_debug)
	      {
		...
	      }

	semant_debug is provided as a convenience. You don't need to use
	the debugging flags if you don't want to. DON'T MODIFY
	Semant.java

	SymbolTable.java contains a symbol table implementation. Read
	the comments in the file and look at the example in
	SymtabExample.java.  You are not required to use this code, but
	you may find it useful. DO NOT MODIFY.

	coolc.jar is a jar file containing the reference implementation 
	with other libraries required for programming assignment. DO NOT MODIFY.

	trap_handler.mars is a trap handler implementation required
	by the MART mips emulator. DO NOT MODIFY.

	mycoolc.py and coolc.py are a python script that glues together the
	phases of the compiler using Unix pipes instead of statically linking
	code. While inefficient, this architecture makes it easy to mix and match
	the components you write with those of the course compiler.
	DO NOT MODIFY.	

	mysemant.py and semant.py are a python script to drive the semantic analyzer. 
	compare-semant.py is a python script to compare the outcome of two semantic
	analyzers. symtab-example.py is a script to run a symbolc table example.
	DO NOT MODIFY.


Instructions
------------

	To compile the example use of the symbol table, type

	% ant symtab-example

	This creates a shell script to run the symbol table example.

	To compile your semantic analyzer program type:

	% ant semant

	To test your semantic checker, type:

	% ./python mysemant.pl foo.cl

	mysemant.py is a version of mycoolc.py that omits code generation.
	mysemant.py parses all the cool files given on the command line and
	builds a single abstract syntax tree containing all class
	definitions appearing in the input files. Your semantic checker
	is then called on this abstract syntax tree.  If there are no
	errors, the program produces a type-annotated abstract syntax
	tree as output.

        To run the reference semantics analysisr on a file 'fool.cl':

        % ./python semant.py foo.cl

        To easily compare your implementation and the reference :

        % ./python compare-semant.py foo.cl

        To run your checker on the files good.cl and bad.cl type:

	% ant test

        To run ten examples in tests directory type:

        % ant test-all

	If you think your semantic checker is correct and behaves like
	the one we wrote, you can try to run mycoolc using your checker,
	your parser and also your lexical analyzer if you choose (see
	below for instructions).  Remember if your lexer, parser or
	checker behaves in an unexpected manner, you may get errors
	anywhere.

	To turn in your work type:
        
        % ant submit-clean
        % submit PA4
        
	Be sure to submit the files cool-tree.java,
	SemanticsAnalysis.java, TreeConstants.java, good.cl, bad.cl,
	good.output, bad.output, and README. Don't forget to edit the
	README file to include your write-up, and to write your own test
	cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like.
 	However, only the last version will be retained for grading.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA4
----------------
# Requirements
[] We must follow the requirement that errors don't cause the analyzes stops.

# Types
Types have attributes. In COOL, some types are classes, program, expressions.
We stop the transversal tree process when we lies with foundational types (Int, String, Object, Boolean).
A function is a type. Its attribute is its signature.
Arithmetic operations are functions.
Attributes have visibility or scope. We follow the de facto standard public, private, protected, internal.
"Public" means that the type is instantiable or callable by other types.
"Private" means that the type is not instantiable or callable by other types.
"Protected" means that the type is instantiable by children in inheritance hierarchy.
"Internal" means that the type is only instantiable by the current module.

We list types and their visibility by the COOL specification.
* Program, Formal, and Expressions are internal.
* Classes and Methods are public. A class can dispatch attrs and methods.
* Attrs are protected.  Inherited attributes cannot be redefined, but they are visible.

So, classes, methods, and attrs are first in Symbol Table with its visibility.


Tasks.
[x] Identify classes and their inheritances.
We implement a BFS flyweight to check classes and their inheritances.
TODO: Remove if statements.
[] How can I check scopes? How can I check types?
Java is an OOP language, so we implement the Composite design pattern in order to traverse AST â€”Recursive structure. Cum Romae fueritis, Romano vivite more.

We first build a table with attributes, methods, and classes.
```Algorithm save classes, and their features in symbol table
for class in classes
    class.buildSymbolTable() # class.buildSymbolTable() -> features.buildSymbolTable()
```
We build a symbol table using "SemanticsAnalysis" Java class and the current type environment (method, object, and the current class environment) is in it.
```Algorithm inferType(semanticsAnalysis)
for class in classes
    class.inferType() # class.inferType() -> features.inferType() -> features.inferType() -> methods.inferType() attributes.inferType() -> ...
```
O environment is semanticsAnalysis.lookupType() It searches on current scope, features and parents.


[] Check self type


