/* The following code was generated by JFlex 1.6.1 */

/*
 * CS164: Spring 2004
 * Programming Assignment 2
 *
 * The scanner definition for Cool.
 *
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>cool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\5\1\6\1\2\1\1\1\2\1\2\1\2\16\5\4\0\1\2"+
    "\1\0\1\17\1\0\1\5\3\0\1\14\1\16\1\15\1\67\1\73"+
    "\1\3\1\71\1\70\1\26\11\13\1\75\1\74\1\66\1\27\1\30"+
    "\1\0\1\76\1\33\1\7\1\31\1\56\1\37\1\43\1\7\1\47"+
    "\1\44\2\7\1\41\1\7\1\46\1\54\1\60\1\7\1\51\1\35"+
    "\1\52\1\64\1\53\1\62\3\7\1\0\1\20\2\0\1\5\1\0"+
    "\1\34\1\23\1\32\1\57\1\40\1\24\1\11\1\50\1\45\2\11"+
    "\1\42\1\11\1\22\1\55\1\61\1\11\1\25\1\36\1\21\1\65"+
    "\1\12\1\63\3\11\1\100\1\0\1\77\1\72\6\5\1\6\32\5"+
    "\1\2\1\0\4\5\4\0\1\11\2\0\1\5\7\0\1\11\4\0"+
    "\1\11\5\0\27\7\1\0\7\7\30\11\1\0\10\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\2\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\2\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\2\7\1\11\1\7\1\11"+
    "\1\7\3\11\2\7\1\11\1\7\1\11\2\7\1\11\3\7\2\11"+
    "\4\7\1\11\2\7\1\11\3\7\3\11\2\7\1\11\2\7\1\11"+
    "\1\7\1\11\1\7\1\11\2\7\1\11\1\7\2\11\1\7\1\11"+
    "\2\7\1\11\3\7\1\11\1\7\1\11\2\7\2\11\1\5\1\7"+
    "\3\11\4\5\1\7\1\5\1\11\1\7\1\5\1\11\1\7\1\5"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\2\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\2\11\1\7\1\5\1\11\1\7\1\11"+
    "\3\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\7\11"+
    "\2\7\1\11\2\7\2\11\1\7\1\11\4\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\105\11\1\5\44\11\7\5\2\11"+
    "\4\0\14\5\16\0\5\11\7\0\1\5\1\0\1\5\21\0\105\5"+
    "\1\11\52\5\1\7\1\11\1\7\1\11\1\5\1\0\1\7\1\11"+
    "\2\0\4\11\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\11\21\7\1\0\11\7\43\11\1\7\2\11\3\7"+
    "\3\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\5\11\1\7\1\11\1\0\1\7\1\11"+
    "\2\7\2\11\63\7\60\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\0\5\5"+
    "\2\0\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\2\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\2\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\0\46\7\2\0\1\5\6\0"+
    "\1\5\47\11\1\5\6\0\1\5\1\0\55\5\1\0\1\5\1\0"+
    "\2\5\1\0\2\5\1\0\1\5\10\0\33\5\4\0\1\5\3\5"+
    "\15\0\6\5\5\0\1\5\4\0\13\5\1\0\1\5\3\0\53\5"+
    "\37\5\4\0\2\5\1\5\143\5\1\0\1\5\10\5\1\0\6\5"+
    "\2\5\2\5\1\0\4\5\2\5\12\5\3\5\2\0\1\5\17\0"+
    "\1\5\1\5\1\5\36\5\33\5\2\0\131\5\13\5\1\5\16\0"+
    "\12\5\41\5\11\5\2\5\4\0\1\5\2\0\3\5\26\5\4\5"+
    "\1\5\11\5\1\5\3\5\1\5\5\5\22\0\31\5\3\5\4\0"+
    "\13\5\65\0\23\5\2\5\1\0\22\5\13\0\61\5\66\5\3\5"+
    "\1\5\22\5\1\5\7\5\12\5\2\5\2\0\12\5\1\0\20\5"+
    "\3\5\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\1\5\3\0\4\5\2\0\1\5\1\5\7\5\2\0\2\5\2\0"+
    "\3\5\1\5\10\0\1\5\4\0\2\5\1\0\3\5\2\5\2\0"+
    "\12\5\2\5\2\5\7\0\2\5\1\0\1\5\2\0\3\5\1\0"+
    "\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\5\5\4\0\2\5\2\0"+
    "\3\5\3\0\1\5\7\0\4\5\1\0\1\5\7\0\14\5\3\5"+
    "\1\5\13\0\3\5\1\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\5\1\5\10\5\1\0"+
    "\3\5\1\0\3\5\2\0\1\5\17\0\2\5\2\5\2\0\12\5"+
    "\1\0\1\5\7\0\7\5\1\0\3\5\1\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\5"+
    "\1\5\7\5\2\0\2\5\2\0\3\5\7\0\3\5\4\0\2\5"+
    "\1\0\3\5\2\5\2\0\12\5\1\0\1\5\20\0\1\5\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\5"+
    "\3\0\3\5\1\0\4\5\2\0\1\5\6\0\1\5\16\0\12\5"+
    "\11\0\1\5\6\0\5\5\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\20\5\3\0\1\5\7\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\1\0\2\5\1\5\5\0\2\5\2\5\2\0\12\5\20\0\4\5"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\1\5\1\5\7\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\7\0\1\5\1\0\2\5\2\5\2\0\12\5\1\0\2\5\15\0"+
    "\5\5\10\5\1\0\3\5\1\0\51\5\2\5\1\5\7\5\1\0"+
    "\3\5\1\0\4\5\1\5\5\0\4\5\7\0\1\5\2\5\2\5"+
    "\2\0\12\5\12\0\6\5\1\0\3\5\1\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\5\4\0\6\5"+
    "\1\0\1\5\1\0\10\5\6\0\12\5\2\0\2\5\15\0\60\5"+
    "\1\5\2\5\7\5\4\0\1\5\7\5\10\5\1\0\12\5\47\0"+
    "\2\5\1\0\1\5\1\0\1\5\2\5\1\5\1\5\1\0\1\5"+
    "\1\5\6\5\4\5\1\5\7\5\1\5\3\5\1\0\1\5\1\0"+
    "\1\5\2\5\2\5\1\5\4\5\1\5\2\5\11\5\1\5\2\0"+
    "\5\5\1\0\1\5\1\0\6\5\2\0\12\5\2\0\4\5\40\0"+
    "\1\5\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\10\5\1\0\44\5\4\0\24\5\1\0\2\5"+
    "\5\5\13\5\1\0\44\5\11\0\1\5\71\0\53\5\24\5\1\5"+
    "\12\5\6\0\6\5\4\5\4\5\3\5\1\5\3\5\2\5\7\5"+
    "\3\5\4\5\15\5\14\5\1\5\17\5\2\0\46\7\1\0\1\7"+
    "\5\0\1\7\2\0\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\51\5\1\0\4\5\2\0\41\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\17\5"+
    "\1\0\71\5\1\0\4\5\2\0\103\5\2\0\3\5\40\0\20\5"+
    "\20\0\125\5\1\5\2\0\6\5\3\0\u026c\5\2\0\21\5\1\2"+
    "\32\5\5\0\113\5\3\0\3\5\10\5\7\0\15\5\1\0\4\5"+
    "\3\5\13\0\22\5\3\5\13\0\22\5\2\5\14\0\15\5\1\0"+
    "\3\5\1\0\2\5\14\0\64\5\40\5\3\0\1\5\3\0\1\5"+
    "\1\5\1\5\2\0\12\5\41\0\4\5\1\0\12\5\6\0\130\5"+
    "\1\5\7\0\51\5\1\5\1\5\5\0\106\5\12\0\37\5\1\0"+
    "\14\5\4\0\14\5\12\0\12\5\36\5\2\0\5\5\13\0\54\5"+
    "\4\0\21\5\7\5\2\5\6\0\12\5\46\0\27\5\5\5\4\0"+
    "\65\5\12\5\1\0\35\5\2\0\13\5\6\0\12\5\15\0\1\5"+
    "\10\0\16\5\1\0\2\5\77\0\5\5\57\5\21\5\7\5\4\0"+
    "\12\5\21\0\11\5\14\0\3\5\36\5\15\5\2\5\12\5\54\5"+
    "\16\5\14\0\44\5\24\5\10\0\12\5\3\0\3\5\12\5\44\5"+
    "\2\0\11\5\7\0\53\5\2\0\3\5\20\0\3\5\1\0\25\5"+
    "\4\5\1\5\4\5\3\5\2\5\4\5\5\0\300\11\72\5\1\0"+
    "\5\5\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\11\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\11\11\10\7"+
    "\6\11\2\0\6\7\2\0\10\11\10\7\10\11\10\7\6\11\2\0"+
    "\6\7\2\0\10\11\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\10\11\10\7\16\11\2\0\10\11\10\5\10\11\10\5\10\11"+
    "\10\5\5\11\1\0\2\11\4\7\1\5\1\0\1\11\3\0\3\11"+
    "\1\0\2\11\4\7\1\5\3\0\4\11\2\0\2\11\4\7\4\0"+
    "\10\11\5\7\5\0\3\11\1\0\2\11\4\7\1\5\3\0\13\2"+
    "\5\5\30\0\1\2\1\2\5\5\1\2\17\0\2\5\23\0\1\5"+
    "\12\0\1\2\5\5\1\0\12\5\1\0\1\11\15\0\1\11\20\0"+
    "\15\11\3\0\40\5\20\0\15\5\4\0\1\5\3\0\14\5\21\0"+
    "\1\7\4\0\1\7\2\0\1\11\3\7\2\11\3\7\1\11\1\0"+
    "\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\11\4\7\1\11\4\5\1\11\2\0\2\11\2\7"+
    "\5\0\1\7\4\11\4\0\1\11\21\0\20\7\20\11\3\5\1\7"+
    "\1\11\4\5\u032d\0\32\4\32\10\u0716\0\57\7\1\0\57\11\1\0"+
    "\1\7\1\11\3\7\2\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\4\7\1\11\1\7\2\11\1\7\10\11\3\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\2\11\6\0\1\7\1\11\1\7"+
    "\1\11\3\5\1\7\1\11\14\0\46\11\1\0\1\11\5\0\1\11"+
    "\2\0\70\5\7\0\1\5\17\0\1\5\27\5\11\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\40\5\57\0\1\5\u01d0\0\1\2\4\0"+
    "\2\5\1\5\31\0\17\5\1\0\5\5\2\0\3\5\2\5\4\0"+
    "\126\5\2\0\2\5\2\0\3\5\1\0\132\5\1\0\4\5\5\0"+
    "\51\5\2\5\1\0\136\5\21\0\33\5\5\5\60\0\20\5\u0200\0"+
    "\u19b6\5\12\5\100\0\u51cd\5\60\5\3\0\u048d\5\103\0\56\5\2\0"+
    "\u010d\5\3\0\20\5\12\5\2\5\24\0\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\5\1\5\4\0\12\5\1\0\1\5\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\3\11\2\5\106\5\14\5\45\0"+
    "\11\5\2\0\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\3\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\12\11\1\7\1\11"+
    "\1\7\1\11\2\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\5\2\0\1\7\1\11\1\7\1\11\1\5\1\7"+
    "\1\11\1\7\3\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\4\7\2\5\2\7\16\5\2\0\11\5\52\0"+
    "\2\5\1\5\3\11\7\5\1\5\3\5\1\5\4\5\1\5\27\5"+
    "\5\5\4\0\1\5\13\0\1\5\7\0\64\5\14\0\2\5\62\5"+
    "\22\5\12\0\12\5\6\0\22\5\6\5\3\0\1\5\1\0\15\5"+
    "\34\5\10\5\2\0\27\5\15\5\14\0\35\5\3\0\4\5\57\5"+
    "\16\5\16\0\1\5\12\5\6\0\5\5\1\5\12\5\12\5\5\5"+
    "\1\0\51\5\16\5\11\0\3\5\1\5\10\5\2\5\2\0\12\5"+
    "\6\0\27\5\3\0\1\5\3\5\62\5\1\5\1\5\3\5\2\5"+
    "\2\5\5\5\2\5\1\5\1\5\1\5\30\0\3\5\2\0\13\5"+
    "\5\5\2\0\3\5\2\5\12\0\6\5\2\0\6\5\2\0\6\5"+
    "\11\0\7\5\1\0\7\5\1\0\53\11\1\0\4\11\4\5\2\11"+
    "\4\5\6\0\120\5\43\5\10\5\1\0\2\5\2\0\12\5\6\0"+
    "\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0"+
    "\7\11\14\0\5\11\5\0\1\5\1\5\12\5\1\0\15\5\1\0"+
    "\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0"+
    "\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5\1\5\3\0\20\5"+
    "\20\0\20\5\3\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5"+
    "\1\0\207\5\2\0\1\5\4\0\1\5\13\0\12\5\7\0\32\7"+
    "\4\0\1\5\1\0\32\11\13\0\131\5\3\0\6\5\2\0\6\5"+
    "\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\5"+
    "\4\0\14\5\1\0\32\5\1\0\23\5\1\0\2\5\1\0\17\5"+
    "\2\0\16\5\42\0\173\5\105\0\65\5\210\0\1\5\202\0\35\5"+
    "\3\0\61\5\17\0\1\5\37\0\40\5\15\0\3\5\21\5\1\5"+
    "\10\5\1\5\5\0\46\5\5\5\5\0\36\5\2\0\44\5\4\0"+
    "\10\5\1\0\5\5\52\0\50\7\50\11\116\5\2\0\12\5\6\0"+
    "\44\5\4\0\44\5\4\0\50\5\10\0\64\5\234\0\u0137\5\11\0"+
    "\26\5\12\0\10\5\230\0\6\5\2\0\1\5\1\0\54\5\1\0"+
    "\2\5\3\0\1\5\2\0\27\5\12\0\27\5\11\0\37\5\101\0"+
    "\23\5\1\0\2\5\12\0\26\5\12\0\32\5\106\0\70\5\6\0"+
    "\2\5\100\0\1\5\3\5\1\0\2\5\5\0\4\5\4\5\1\0"+
    "\3\5\1\0\33\5\2\5\2\0\3\5\4\0\1\5\40\0\35\5"+
    "\3\0\35\5\43\0\10\5\1\0\34\5\2\5\31\0\66\5\12\0"+
    "\26\5\12\0\23\5\15\0\22\5\156\0\111\5\67\0\63\5\15\0"+
    "\63\5\15\0\50\5\10\0\12\5\u0146\0\52\5\1\0\2\5\3\0"+
    "\2\5\116\0\35\5\12\0\1\5\10\0\41\5\137\0\25\5\33\0"+
    "\27\5\11\0\3\5\65\5\17\5\37\0\12\5\17\0\4\5\55\5"+
    "\13\5\2\0\1\5\17\0\1\5\2\0\31\5\7\0\12\5\6\0"+
    "\3\5\44\5\16\5\1\0\12\5\4\0\4\5\10\0\43\5\1\5"+
    "\2\0\1\5\11\0\3\5\60\5\16\5\4\5\4\0\4\5\1\0"+
    "\14\5\1\5\1\0\1\5\43\0\22\5\1\0\31\5\14\5\6\0"+
    "\1\5\101\0\7\5\1\0\1\5\1\0\4\5\1\0\17\5\1\0"+
    "\12\5\7\0\57\5\14\5\5\0\12\5\6\0\4\5\1\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\1\0\2\5\1\5\7\5\2\0\2\5\2\0\3\5\2\0\1\5"+
    "\6\0\1\5\5\0\5\5\2\5\2\0\7\5\3\0\5\5\213\0"+
    "\113\5\5\0\12\5\4\0\4\5\36\0\60\5\24\5\2\5\1\0"+
    "\1\5\10\0\12\5\246\0\57\5\7\5\2\0\11\5\27\0\6\5"+
    "\42\0\60\5\21\5\3\0\1\5\13\0\12\5\46\0\53\5\16\5"+
    "\7\0\12\5\66\0\33\5\2\0\17\5\4\0\12\5\306\0\73\5"+
    "\145\0\40\7\40\11\12\5\25\0\1\5\7\5\2\0\1\5\2\0"+
    "\10\5\1\0\2\5\1\0\36\5\1\0\2\5\2\0\11\5\14\0"+
    "\12\5\106\0\10\5\2\0\56\5\2\0\10\5\1\0\2\5\33\0"+
    "\77\5\10\0\1\5\10\0\112\5\3\0\1\5\42\0\71\5\u0107\0"+
    "\11\5\1\0\55\5\1\0\11\5\17\0\12\5\30\0\36\5\2\0"+
    "\26\5\1\0\16\5\111\0\7\5\1\0\2\5\1\0\54\5\3\0"+
    "\1\5\1\0\2\5\1\0\11\5\10\0\12\5\6\0\6\5\1\0"+
    "\2\5\1\0\45\5\1\0\2\5\1\0\6\5\7\0\12\5\u0136\0"+
    "\27\5\271\0\1\5\54\0\4\5\37\0\u0399\5\1\5\146\0\157\5"+
    "\21\0\304\5\u0abc\0\u042f\5\1\0\11\5\u0fc7\0\u0247\5\u21b9\0\u0239\5"+
    "\7\0\37\5\1\0\12\5\146\0\36\5\2\0\5\5\13\0\60\5"+
    "\7\5\11\0\4\5\14\0\12\5\11\0\25\5\5\0\23\5\u02b0\0"+
    "\100\5\200\0\105\5\6\5\4\0\1\5\1\5\67\5\7\0\4\5"+
    "\15\5\100\0\2\5\1\0\2\5\13\0\2\5\16\0\u17f8\5\10\0"+
    "\u04d6\5\52\0\11\5\u22f7\0\2\5\u011d\5\61\0\3\5\21\0\4\5"+
    "\10\0\u018c\5\u0904\0\153\5\5\0\15\5\3\0\11\5\7\0\12\5"+
    "\3\0\2\5\1\0\4\5\u14c1\0\5\5\3\0\26\5\2\0\7\5"+
    "\36\0\4\5\224\0\3\5\u01bb\0\32\7\32\11\32\7\7\11\1\0"+
    "\22\11\32\7\32\11\1\7\1\0\2\7\2\0\1\7\2\0\2\7"+
    "\2\0\4\7\1\0\10\7\4\11\1\0\1\11\1\0\7\11\1\0"+
    "\13\11\32\7\32\11\2\7\1\0\4\7\2\0\10\7\1\0\7\7"+
    "\1\0\32\11\2\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0"+
    "\7\7\1\0\32\11\32\7\32\11\32\7\32\11\32\7\32\11\32\7"+
    "\32\11\32\7\32\11\32\7\34\11\2\0\31\7\1\0\31\11\1\0"+
    "\6\11\31\7\1\0\31\11\1\0\6\11\31\7\1\0\31\11\1\0"+
    "\6\11\31\7\1\0\31\11\1\0\6\11\31\7\1\0\31\11\1\0"+
    "\6\11\1\7\1\11\2\0\62\5\u0200\0\67\5\4\0\62\5\10\0"+
    "\1\5\16\0\1\5\26\0\5\5\1\0\17\5\u0550\0\7\5\1\0"+
    "\21\5\2\0\7\5\1\0\2\5\1\0\5\5\325\0\55\5\3\0"+
    "\16\5\2\0\12\5\4\0\1\5\u0171\0\72\5\5\0\1\5\u0500\0"+
    "\305\5\13\0\7\5\51\0\114\5\4\0\12\5\u0356\0\1\5\u014f\0"+
    "\4\5\1\0\33\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0"+
    "\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5\4\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0"+
    "\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0"+
    "\4\5\1\0\4\5\1\0\1\5\1\0\12\5\1\0\21\5\5\0"+
    "\3\5\1\0\5\5\1\0\21\5\u0274\0\32\4\6\0\32\4\6\0"+
    "\32\4\u0a66\0\12\5\u0406\0\ua6d7\5\7\5\42\0\u1035\5\13\0\336\5"+
    "\2\0\u1682\5\16\0\u1d31\5\u0c1f\0\u021e\5\u05e2\0\u134b\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0"+
    "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\1\11\1\12\1\13\3\6\1\14\1\5"+
    "\1\6\1\5\1\6\1\5\1\6\2\5\1\6\3\5"+
    "\1\6\1\5\1\6\1\5\1\6\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\3\1\30\1\31\1\30\1\3\1\32\1\33\5\6"+
    "\1\34\1\35\2\5\2\6\2\5\2\6\2\5\2\6"+
    "\1\34\1\36\1\37\1\5\1\36\1\37\1\6\3\5"+
    "\2\40\1\5\1\6\1\5\1\6\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\2\6"+
    "\1\53\1\54\1\6\2\5\2\6\2\5\2\6\1\55"+
    "\1\5\1\55\1\6\2\5\2\6\1\53\1\54\2\5"+
    "\1\6\1\5\1\6\1\56\1\57\1\6\1\60\1\5"+
    "\1\60\1\6\1\61\1\62\1\61\1\62\2\63\2\5"+
    "\2\6\1\57\2\64\1\5\1\6\1\65\2\66\2\5"+
    "\2\6\2\67\1\5\1\70\1\6\1\70\1\5\1\6"+
    "\2\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\303\0\303\0\u0104\0\u0145"+
    "\0\u0186\0\u0186\0\u01c7\0\u0208\0\u0249\0\303\0\303\0\u028a"+
    "\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492"+
    "\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a"+
    "\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\u0820"+
    "\0\303\0\303\0\u0861\0\u08a2\0\303\0\303\0\u08e3\0\u0924"+
    "\0\u0965\0\u09a6\0\u09e7\0\u0186\0\303\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0145\0\u0d34\0\u0145\0\u0d75\0\u0db6\0\u0186\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0145\0\u0186\0\u0efb\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\u0fff\0\u1040\0\u0186\0\u0186\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u0145\0\u12ca\0\u0186\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\u0145\0\u0145\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u0186"+
    "\0\u0186\0\u1595\0\u0145\0\u15d6\0\u0186\0\u1617\0\u0145\0\u0145"+
    "\0\u0186\0\u0186\0\u0145\0\u0186\0\u1658\0\u1699\0\u16da\0\u171b"+
    "\0\u0145\0\u0145\0\u0186\0\u175c\0\u179d\0\u0186\0\u0145\0\u0186"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u0145\0\u0186\0\u18e2\0\u0145"+
    "\0\u1923\0\u0186\0\u1964\0\u19a5\0\u0145\0\u0186";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\6\1\10"+
    "\2\11\1\12\1\13\1\14\1\15\1\16\1\17\1\4"+
    "\1\20\1\21\1\11\1\22\1\11\1\13\1\23\1\4"+
    "\1\24\1\25\1\10\1\11\1\10\1\11\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\10\1\11"+
    "\1\10\1\36\1\10\1\37\1\40\1\10\1\11\1\41"+
    "\1\42\1\43\1\44\1\10\1\11\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\6\1\5\13\6\1\60\63\6\17\61\1\62\1\63"+
    "\60\61\104\0\1\64\102\0\3\10\1\0\3\10\5\0"+
    "\6\10\2\0\35\10\20\0\3\11\1\0\3\11\5\0"+
    "\6\11\2\0\35\11\26\0\1\13\12\0\1\13\67\0"+
    "\1\65\101\0\1\66\67\0\3\11\1\0\3\11\5\0"+
    "\4\11\1\67\1\11\2\0\16\11\2\70\1\67\14\11"+
    "\20\0\3\11\1\0\3\11\5\0\6\11\2\0\6\11"+
    "\2\71\13\11\2\72\10\11\20\0\3\11\1\0\3\11"+
    "\5\0\6\11\2\0\2\11\2\73\7\11\2\74\20\11"+
    "\43\0\1\75\55\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\2\10\2\76\4\10\2\77\23\10\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\2\11\2\100\4\11"+
    "\2\101\23\11\20\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\4\10\2\102\2\10\2\103\23\10\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\4\11\2\104\2\11"+
    "\2\105\23\11\20\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\6\10\2\106\13\10\2\107\10\10\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\6\11\2\110\13\11"+
    "\2\111\10\11\20\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\13\10\2\112\20\10\20\0\3\10\1\0\3\10"+
    "\5\0\1\10\1\113\1\10\1\114\2\10\2\0\4\10"+
    "\2\115\4\10\1\114\2\10\1\113\17\10\20\0\3\11"+
    "\1\0\3\11\5\0\1\11\1\116\1\11\1\117\2\11"+
    "\2\0\4\11\2\120\4\11\1\117\2\11\1\116\17\11"+
    "\20\0\3\10\1\0\3\10\5\0\6\10\2\0\6\10"+
    "\2\121\13\10\2\122\10\10\20\0\3\10\1\0\3\10"+
    "\5\0\6\10\2\0\16\10\2\123\15\10\20\0\3\10"+
    "\1\0\3\10\5\0\3\10\1\124\2\10\2\0\12\10"+
    "\1\124\22\10\20\0\3\11\1\0\3\11\5\0\3\11"+
    "\1\125\2\11\2\0\12\11\1\125\22\11\20\0\3\10"+
    "\1\0\3\10\5\0\6\10\2\0\23\10\2\126\10\10"+
    "\20\0\3\11\1\0\3\11\5\0\6\11\2\0\23\11"+
    "\2\127\10\11\20\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\16\10\2\130\15\10\20\0\3\11\1\0\3\11"+
    "\5\0\6\11\2\0\16\11\2\131\15\11\16\0\1\132"+
    "\113\0\1\133\63\0\1\134\15\0\1\135\1\0\1\136"+
    "\1\137\1\140\1\141\1\142\1\143\52\0\1\64\1\0"+
    "\77\64\5\0\3\11\1\0\3\11\5\0\6\11\2\0"+
    "\33\11\2\144\20\0\3\11\1\0\3\11\5\0\6\11"+
    "\2\0\6\11\2\145\25\11\20\0\3\11\1\0\3\11"+
    "\5\0\6\11\2\0\31\11\2\146\2\11\20\0\3\11"+
    "\1\0\3\11\5\0\1\147\5\11\2\0\21\11\1\147"+
    "\13\11\20\0\3\11\1\0\3\11\5\0\6\11\2\0"+
    "\10\11\2\150\23\11\20\0\3\10\1\0\3\10\5\0"+
    "\6\10\2\0\4\10\2\151\27\10\20\0\3\10\1\0"+
    "\3\10\5\0\6\10\2\0\2\10\2\152\31\10\20\0"+
    "\3\11\1\0\3\11\5\0\6\11\2\0\4\11\2\153"+
    "\27\11\20\0\3\11\1\0\3\11\5\0\6\11\2\0"+
    "\2\11\2\154\31\11\20\0\3\10\1\0\3\10\5\0"+
    "\6\10\2\0\2\10\2\155\31\10\20\0\3\10\1\0"+
    "\3\10\5\0\6\10\2\0\4\10\2\156\27\10\20\0"+
    "\3\11\1\0\3\11\5\0\6\11\2\0\2\11\2\157"+
    "\31\11\20\0\3\11\1\0\3\11\5\0\6\11\2\0"+
    "\4\11\2\160\27\11\20\0\3\10\1\0\3\10\5\0"+
    "\1\161\5\10\2\0\21\10\1\161\13\10\20\0\3\10"+
    "\1\0\3\10\5\0\6\10\2\0\23\10\2\162\10\10"+
    "\20\0\3\11\1\0\3\11\5\0\1\163\5\11\2\0"+
    "\21\11\1\163\13\11\20\0\3\11\1\0\3\11\5\0"+
    "\6\11\2\0\23\11\2\164\10\11\20\0\3\10\1\0"+
    "\3\10\5\0\6\10\2\0\16\10\2\165\15\10\20\0"+
    "\3\10\1\0\1\10\1\166\1\10\5\0\6\10\2\0"+
    "\22\10\1\166\12\10\20\0\3\11\1\0\3\11\5\0"+
    "\6\11\2\0\16\11\2\167\15\11\20\0\3\11\1\0"+
    "\1\11\1\170\1\11\5\0\6\11\2\0\22\11\1\170"+
    "\12\11\20\0\3\10\1\0\3\10\5\0\6\10\2\0"+
    "\31\10\2\171\2\10\20\0\3\10\1\0\3\10\5\0"+
    "\1\172\5\10\2\0\21\10\1\172\13\10\20\0\3\10"+
    "\1\0\3\10\5\0\6\10\2\0\6\10\2\173\25\10"+
    "\20\0\3\10\1\0\3\10\5\0\6\10\2\0\23\10"+
    "\2\174\10\10\20\0\3\11\1\0\3\11\5\0\6\11"+
    "\2\0\23\11\2\175\10\11\20\0\3\10\1\0\3\10"+
    "\5\0\6\10\2\0\13\10\2\176\20\10\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\13\11\2\177\20\11"+
    "\20\0\3\11\1\0\3\11\5\0\6\11\2\0\6\11"+
    "\2\200\25\11\20\0\3\11\1\0\3\11\5\0\1\11"+
    "\1\201\4\11\2\0\15\11\1\201\17\11\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\4\11\2\202\27\11"+
    "\20\0\3\10\1\0\3\10\5\0\6\10\2\0\6\10"+
    "\2\203\25\10\20\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\4\10\2\204\27\10\20\0\3\11\1\0\3\11"+
    "\5\0\6\11\2\0\6\11\2\205\25\11\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\4\11\2\206\27\11"+
    "\20\0\3\10\1\0\3\10\5\0\6\10\2\0\2\207"+
    "\33\10\20\0\3\10\1\0\3\10\5\0\6\10\2\0"+
    "\6\10\2\210\25\10\20\0\3\11\1\0\3\11\5\0"+
    "\6\11\2\0\2\211\33\11\20\0\3\11\1\0\3\11"+
    "\5\0\6\11\2\0\6\11\2\212\25\11\20\0\3\10"+
    "\1\0\3\10\5\0\6\10\2\0\27\10\2\213\4\10"+
    "\20\0\3\11\1\0\3\11\5\0\6\11\2\0\27\11"+
    "\2\214\4\11\20\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\6\10\2\215\25\10\20\0\3\10\1\0\3\10"+
    "\5\0\6\10\2\0\23\10\2\216\10\10\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\6\11\2\217\25\11"+
    "\20\0\3\11\1\0\3\11\5\0\6\11\2\0\23\11"+
    "\2\220\10\11\20\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\221\4\10\2\0\15\10\1\221\17\10\20\0\3\10"+
    "\1\0\3\10\5\0\6\10\2\0\10\10\2\222\23\10"+
    "\20\0\3\11\1\0\3\11\5\0\6\11\2\0\10\11"+
    "\2\223\23\11\20\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\10\10\2\224\23\10\20\0\3\11\1\0\3\11"+
    "\5\0\6\11\2\0\10\11\2\225\23\11\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\6\11\2\226\25\11"+
    "\20\0\3\10\1\0\3\10\5\0\6\10\2\0\4\10"+
    "\2\227\27\10\20\0\3\11\1\0\3\11\5\0\6\11"+
    "\2\0\4\11\2\230\27\11\20\0\3\10\1\0\3\10"+
    "\5\0\4\10\1\231\1\10\2\0\20\10\1\231\14\10"+
    "\20\0\3\10\1\0\3\10\5\0\6\10\2\0\13\10"+
    "\2\232\20\10\20\0\3\11\1\0\3\11\5\0\4\11"+
    "\1\233\1\11\2\0\20\11\1\233\14\11\20\0\3\11"+
    "\1\0\3\11\5\0\6\11\2\0\13\11\2\234\20\11"+
    "\20\0\3\10\1\0\3\10\5\0\6\10\2\0\6\10"+
    "\2\235\25\10\20\0\3\11\1\0\3\11\5\0\6\11"+
    "\2\0\6\11\2\236\25\11\20\0\3\10\1\0\3\10"+
    "\5\0\6\10\2\0\13\10\2\237\20\10\20\0\3\10"+
    "\1\0\3\10\5\0\6\10\2\0\25\10\2\240\6\10"+
    "\20\0\3\11\1\0\3\11\5\0\6\11\2\0\13\11"+
    "\2\241\20\11\20\0\3\11\1\0\3\11\5\0\6\11"+
    "\2\0\25\11\2\242\6\11\20\0\3\10\1\0\3\10"+
    "\5\0\1\243\5\10\2\0\21\10\1\243\13\10\20\0"+
    "\3\11\1\0\3\11\5\0\1\244\5\11\2\0\21\11"+
    "\1\244\13\11\20\0\3\10\1\0\3\10\5\0\6\10"+
    "\2\0\4\10\2\245\27\10\20\0\3\11\1\0\3\11"+
    "\5\0\6\11\2\0\4\11\2\246\27\11\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6630];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\7\1\2\11\26\1\12\11\1\1\2\11"+
    "\2\1\2\11\6\1\1\11\34\1\12\11\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // Max size of string constants
    static int MAX_STR_CONST = 1024;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    // For line numbers
    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }

    void count_new_line() {
        curr_lineno++;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }

    /*
     * Add extra field and methods here.
     */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
      // empty for now
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 6094) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MULTILINE_COMMENT: {
              yybegin(YYINITIAL);
      return new Symbol(TokenConstants.ERROR, "EOF in comment");
            }
            case 167: break;
            case STRING: {
              yybegin(YYINITIAL);
      return new Symbol(TokenConstants.ERROR, "EOF in string constant");
            }
            case 168: break;
            default:
          {     return new Symbol(TokenConstants.EOF);
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*
                    *  This should be the very last rule and will match
                    *  everything not matched by other lexical rules.
                    */
                  return new Symbol(TokenConstants.ERROR, yytext());
            }
          case 58: break;
          case 2: 
            { count_new_line();
            }
          case 59: break;
          case 3: 
            { 
            }
          case 60: break;
          case 4: 
            { return new Symbol(TokenConstants.MINUS);
            }
          case 61: break;
          case 5: 
            { return new Symbol(TokenConstants.TYPEID,
					    AbstractTable.inttable.addString(yytext()));
            }
          case 62: break;
          case 6: 
            { return new Symbol(TokenConstants.OBJECTID,
					    AbstractTable.inttable.addString(yytext()));
            }
          case 63: break;
          case 7: 
            { return new Symbol(TokenConstants.INT_CONST,
					    AbstractTable.inttable.addString(yytext()));
            }
          case 64: break;
          case 8: 
            { return new Symbol(TokenConstants.LPAREN);
            }
          case 65: break;
          case 9: 
            { return new Symbol(TokenConstants.MULT);
            }
          case 66: break;
          case 10: 
            { return new Symbol(TokenConstants.RPAREN);
            }
          case 67: break;
          case 11: 
            { string_buf.setLength(0); 
   yybegin(STRING);
            }
          case 68: break;
          case 12: 
            { return new Symbol(TokenConstants.EQ);
            }
          case 69: break;
          case 13: 
            { return new Symbol(TokenConstants.LT);
            }
          case 70: break;
          case 14: 
            { return new Symbol(TokenConstants.PLUS);
            }
          case 71: break;
          case 15: 
            { return new Symbol(TokenConstants.DIV);
            }
          case 72: break;
          case 16: 
            { return new Symbol(TokenConstants.DOT);
            }
          case 73: break;
          case 17: 
            { return new Symbol(TokenConstants.NEG);
            }
          case 74: break;
          case 18: 
            { return new Symbol(TokenConstants.COMMA);
            }
          case 75: break;
          case 19: 
            { return new Symbol(TokenConstants.SEMI);
            }
          case 76: break;
          case 20: 
            { return new Symbol(TokenConstants.COLON);
            }
          case 77: break;
          case 21: 
            { return new Symbol(TokenConstants.AT);
            }
          case 78: break;
          case 22: 
            { return new Symbol(TokenConstants.RBRACE);
            }
          case 79: break;
          case 23: 
            { return new Symbol(TokenConstants.LBRACE);
            }
          case 80: break;
          case 24: 
            { string_buf.append(yytext());
            }
          case 81: break;
          case 25: 
            { yybegin(YYINITIAL);
	if (string_buf.length() > MAX_STR_CONST)
           return new Symbol(TokenConstants.ERROR, "String constant too long");
        return new Symbol(TokenConstants.STR_CONST, AbstractTable.stringtable.addString(string_buf.toString()));
            }
          case 82: break;
          case 26: 
            { yybegin(MULTILINE_COMMENT);
            }
          case 83: break;
          case 27: 
            { return new Symbol(TokenConstants.ERROR, "Unmatched *)");
            }
          case 84: break;
          case 28: 
            { return new Symbol(TokenConstants.FI);
            }
          case 85: break;
          case 29: 
            { return new Symbol(TokenConstants.DARROW);
            }
          case 86: break;
          case 30: 
            { return new Symbol(TokenConstants.IN);
            }
          case 87: break;
          case 31: 
            { return new Symbol(TokenConstants.IF);
            }
          case 88: break;
          case 32: 
            { return new Symbol(TokenConstants.OF);
            }
          case 89: break;
          case 33: 
            { return new Symbol(TokenConstants.ASSIGN);
            }
          case 90: break;
          case 34: 
            { yybegin(YYINITIAL);
            }
          case 91: break;
          case 35: 
            { string_buf.append("\n"); count_new_line();
            }
          case 92: break;
          case 36: 
            { string_buf.append("\"");
            }
          case 93: break;
          case 37: 
            { string_buf.append("\t");
            }
          case 94: break;
          case 38: 
            { string_buf.append("\n");
            }
          case 95: break;
          case 39: 
            { string_buf.append("\b");
            }
          case 96: break;
          case 40: 
            { string_buf.append("\f");
            }
          case 97: break;
          case 41: 
            { string_buf.append("\r");
            }
          case 98: break;
          case 42: 
            { string_buf.append("0");
            }
          case 99: break;
          case 43: 
            { return new Symbol(TokenConstants.NEW);
            }
          case 100: break;
          case 44: 
            { return new Symbol(TokenConstants.NOT);
            }
          case 101: break;
          case 45: 
            { return new Symbol(TokenConstants.LET);
            }
          case 102: break;
          case 46: 
            { return new Symbol(TokenConstants.BOOL_CONST, Boolean.TRUE);
            }
          case 103: break;
          case 47: 
            { return new Symbol(TokenConstants.THEN);
            }
          case 104: break;
          case 48: 
            { return new Symbol(TokenConstants.CASE);
            }
          case 105: break;
          case 49: 
            { return new Symbol(TokenConstants.ESAC);
            }
          case 106: break;
          case 50: 
            { return new Symbol(TokenConstants.ELSE);
            }
          case 107: break;
          case 51: 
            { return new Symbol(TokenConstants.LOOP);
            }
          case 108: break;
          case 52: 
            { return new Symbol(TokenConstants.POOL);
            }
          case 109: break;
          case 53: 
            { return new Symbol(TokenConstants.BOOL_CONST, Boolean.FALSE);
            }
          case 110: break;
          case 54: 
            { return new Symbol(TokenConstants.CLASS);
            }
          case 111: break;
          case 55: 
            { return new Symbol(TokenConstants.WHILE);
            }
          case 112: break;
          case 56: 
            { return new Symbol(TokenConstants.ISVOID);
            }
          case 113: break;
          case 57: 
            { return new Symbol(TokenConstants.INHERITS);
            }
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
