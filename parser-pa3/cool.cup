/*
 * cool.cup
 *
 * CS164: Spring 2004 
 * Programming Assignment 3
 *
 * Parser definition for the Cool language.
 *
 */

import java_cup.runtime.*;

/* Code enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

:} 

/************************************************************************/
/*                DON'T CHANGE ANYTHING IN THIS SECTION                 */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}


/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */
terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WON'T WORK      */
/**************************************************************************/



/*
 * Declare types for the grammar's non-terminals.
 *
 * Hint: You will have to add/modify this list.
 */
nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class_cc;
nonterminal Features optional_feature_list;
nonterminal Formals optional_formal_list;
nonterminal formalc formal_c;
nonterminal Cases cases_c;
nonterminal method method_c;
nonterminal attr attr_c;
nonterminal branch branch_c;
nonterminal Expression expr, let;
nonterminal Expressions actuals, exp_list, statements;


/*
 * Precedence declarations.
 */
/*** FILL-IN HERE ***/
precedence right ASSIGN;
precedence right NOT;
precedence nonassoc EQ, LE, LT;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence right ISVOID;
precedence right NEG;
precedence right AT;
precedence right DOT;

/***********************************************************************
 * Grammar rules.                                                      *
 *                                                                     *
 * Some parts of rules have been provided for you as an example and    *
 * to get you started.  You should not need to modify this code to get *
 * a working solution, but you are welcome to if you like.  However,   *
 * do not assume that any particular rule is complete.                 *
 ***********************************************************************/

/* Star symbol is the start symbol. */
program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
	| error
	    {: RESULT = new programc(curr_lineno(),
                                     new Classes(curr_lineno())); :}
        ;


class_list
	/* single class */
	::= class_cc:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class_cc:c
	    {: RESULT = cl.appendElement(c); :}
	;


/* Class declarations
 *
 * If no parent is specified, the class inherits from the Object class.
 */
class_cc
	::= CLASS TYPEID:n LBRACE optional_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                    AbstractTable.idtable.addString("Object"), 
				    f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE optional_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error
	;


optional_feature_list
	::=    /* empty or EPISLON */
	       {: RESULT = new Features(curr_lineno()); :}
	      | optional_feature_list:features attr_c:attribute SEMI
	        {: RESULT = features.appendElement(attribute); :}
	      | optional_feature_list:features method_c:methodc SEMI
	        {: RESULT = features.appendElement(methodc); :}
         ;


attr_c ::=
            /* no assigment */
            OBJECTID:id COLON TYPEID:type
            {: RESULT = new attr(curr_lineno(), id, type, new no_expr(curr_lineno())); :}
            /* assigment */
	  | OBJECTID:id COLON TYPEID:type ASSIGN expr:e1
            {: RESULT = new attr(curr_lineno(), id, type, e1); :}
	    | error
	  ;


method_c ::=
             /* method with arguments */
              OBJECTID:name LPAREN optional_formal_list:formals RPAREN COLON TYPEID:return_type LBRACE expr:e1 RBRACE
              {: RESULT = new method(curr_lineno(), name, formals, return_type,  e1); :}
             /* no arguments */
            | OBJECTID:name LPAREN RPAREN COLON TYPEID:return_type LBRACE expr:e1 RBRACE
              {: RESULT = new method(curr_lineno(), name, new Formals(curr_lineno()), return_type,  e1); :}
	    | error
	    ;

optional_formal_list ::=   formal_c:formal
                          {: RESULT = (new Formals(curr_lineno())).appendElement(formal); :}
                      |   optional_formal_list:formals COMMA formal_c:formal
		          {: RESULT = formals.appendElement(formal); :}
		      ;

formal_c ::= OBJECTID:name COLON TYPEID:type_declaration
             {: RESULT = new formalc(curr_lineno(), name, type_declaration); :}
	     | error
	    ;

/* Expression */
expr
	::= 
	  OBJECTID:name ASSIGN expr:e1
	    {: RESULT = new assign(curr_lineno(), name, e1); :}
	|
	  expr:e1 AT TYPEID:type_name DOT OBJECTID:name actuals:actual
	   {: RESULT = new static_dispatch(curr_lineno(), e1, type_name,  name, actual); :}
	|
	  expr:e1 DOT OBJECTID:name actuals:actual
	   {: RESULT = new dispatch(curr_lineno(), e1, name, actual); :}
	|
	  IF expr:predicate THEN expr:then_expr ELSE expr:else_expr FI 
	  {: RESULT = new cond(curr_lineno(), predicate, then_expr, else_expr); :} 
	|
	  WHILE expr:predicate LOOP expr:body POOL
	  {: RESULT = new loop(curr_lineno(), predicate, body); :} 
	|
	  LBRACE statements:body RBRACE
          {: RESULT = new block(curr_lineno(), body); :}
	| LET let:e 
	   {: RESULT = e; :}
	| CASE expr:expression OF cases_c:cases ESAC
	   {: RESULT = new typcase(curr_lineno(), expression, cases); :}
	|
	  expr:e1 PLUS expr:e2
	    {: RESULT = new plus(curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
	    {: RESULT = new sub(curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
	    {: RESULT = new mul(curr_lineno(), e1, e2); :}
	| expr:e1 DIV expr:e2
	    {: RESULT = new divide(curr_lineno(), e1, e2); :}
	| NEG expr:e
	    {: RESULT = new neg(curr_lineno(), e); :}
	| expr:e1 LT expr:e2
	    {: RESULT = new lt(curr_lineno(), e1, e2); :}
	| expr:e1 EQ expr:e2
	    {: RESULT = new eq(curr_lineno(), e1, e2); :}
	| expr:e1 LE expr:e2
	    {: RESULT = new leq(curr_lineno(), e1, e2); :}
	| NOT expr:e
	    {: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
	    {: RESULT = e; :}
	| NEW TYPEID:type
	    {: RESULT = new new_(curr_lineno(), type); :}
	| ISVOID expr:expression
	    {: RESULT = new isvoid(curr_lineno(), expression); :}
	| INT_CONST:i
	    {: RESULT = new int_const(curr_lineno(), i); :}
	| STR_CONST:s
	    {: RESULT = new string_const(curr_lineno(), s); :}
	| BOOL_CONST:b
	    {: RESULT = new bool_const(curr_lineno(), b); :}
	| OBJECTID:o
	    {: RESULT = new object(curr_lineno(), o); :}
	| OBJECTID:name actuals:actual
	    {: RESULT = new dispatch(curr_lineno(),
	                             new object(curr_lineno(), 
	                                        AbstractTable.idtable.addString("self")),
				     name, actual); :}
	| error
        ;

let ::=    OBJECTID:name COLON TYPEID:type COMMA let:body
           {: RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), body); :}
         | OBJECTID:name COLON TYPEID:type ASSIGN expr:init COMMA let:body
           {: RESULT = new let(curr_lineno(), name, type, init, body); :} 
	 |  OBJECTID:name COLON TYPEID:type IN expr:body
           {: RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), body); :}
         | OBJECTID:name COLON TYPEID:type ASSIGN expr:init IN expr:body
           {: RESULT = new let(curr_lineno(), name, type, init, body); :} 
	 | error
      ;

cases_c ::= 
            OBJECTID:name COLON TYPEID:type DARROW expr:expression SEMI
             {: RESULT = (new Cases(curr_lineno())).appendElement(
	                   new branch(curr_lineno(), name, type, expression)
	                ); 
	     :}
	   |
            cases_c:cases OBJECTID:name COLON TYPEID:type DARROW expr:expression SEMI
	    {: RESULT = cases.appendElement(new branch(curr_lineno(), name, type, expression)); :}
	    | error
          ;

/* Method arguments */
actuals
        /* No arguments */
	::= LPAREN RPAREN
	    {: RESULT = new Expressions(curr_lineno()); :}
        /* List of arguments */
	| LPAREN exp_list:el RPAREN
	    {: RESULT = el; :}
	| error
	;

/* Non-empty list of expressions */
exp_list
        /* One expression */
	::= expr:e
	    {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :} 
        /* Several expressions */
	| exp_list:el COMMA expr:e
	    {: RESULT = el.appendElement(e); :}
	| error
	;

/* non empty list of statements */
statements  ::= 
              expr:e SEMI
	      {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :} 
	    | statements:statements_list expr:e SEMI
	      {: RESULT = statements_list.appendElement(e); :}
	    | error
	    ;
